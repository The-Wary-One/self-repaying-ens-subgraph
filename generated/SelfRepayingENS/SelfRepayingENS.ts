// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Subscribe extends ethereum.Event {
  get params(): Subscribe__Params {
    return new Subscribe__Params(this);
  }
}

export class Subscribe__Params {
  _event: Subscribe;

  constructor(event: Subscribe) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexedName(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Unsubscribe extends ethereum.Event {
  get params(): Unsubscribe__Params {
    return new Unsubscribe__Params(this);
  }
}

export class Unsubscribe__Params {
  _event: Unsubscribe;

  constructor(event: Unsubscribe) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexedName(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SelfRepayingENS__checkerResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getCanExec(): boolean {
    return this.value0;
  }

  getExecPayload(): Bytes {
    return this.value1;
  }
}

export class SelfRepayingENS extends ethereum.SmartContract {
  static bind(address: Address): SelfRepayingENS {
    return new SelfRepayingENS("SelfRepayingENS", address);
  }

  checker(name: string, subscriber: Address): SelfRepayingENS__checkerResult {
    let result = super.call("checker", "checker(string,address):(bool,bytes)", [
      ethereum.Value.fromString(name),
      ethereum.Value.fromAddress(subscriber)
    ]);

    return new SelfRepayingENS__checkerResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checker(
    name: string,
    subscriber: Address
  ): ethereum.CallResult<SelfRepayingENS__checkerResult> {
    let result = super.tryCall(
      "checker",
      "checker(string,address):(bool,bytes)",
      [ethereum.Value.fromString(name), ethereum.Value.fromAddress(subscriber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SelfRepayingENS__checkerResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  dedicatedExecutorProxy(): Address {
    let result = super.call(
      "dedicatedExecutorProxy",
      "dedicatedExecutorProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dedicatedExecutorProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dedicatedExecutorProxy",
      "dedicatedExecutorProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTaskId(subscriber: Address, name: string): Bytes {
    let result = super.call(
      "getTaskId",
      "getTaskId(address,string):(bytes32)",
      [ethereum.Value.fromAddress(subscriber), ethereum.Value.fromString(name)]
    );

    return result[0].toBytes();
  }

  try_getTaskId(subscriber: Address, name: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTaskId",
      "getTaskId(address,string):(bytes32)",
      [ethereum.Value.fromAddress(subscriber), ethereum.Value.fromString(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVariableMaxGasPrice(name: string): BigInt {
    let result = super.call(
      "getVariableMaxGasPrice",
      "getVariableMaxGasPrice(string):(uint256)",
      [ethereum.Value.fromString(name)]
    );

    return result[0].toBigInt();
  }

  try_getVariableMaxGasPrice(name: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVariableMaxGasPrice",
      "getVariableMaxGasPrice(string):(uint256)",
      [ethereum.Value.fromString(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  subscribe(name: string): Bytes {
    let result = super.call("subscribe", "subscribe(string):(bytes32)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBytes();
  }

  try_subscribe(name: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall("subscribe", "subscribe(string):(bytes32)", [
      ethereum.Value.fromString(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _registrar(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gelatoOps(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenewCall extends ethereum.Call {
  get inputs(): RenewCall__Inputs {
    return new RenewCall__Inputs(this);
  }

  get outputs(): RenewCall__Outputs {
    return new RenewCall__Outputs(this);
  }
}

export class RenewCall__Inputs {
  _call: RenewCall;

  constructor(call: RenewCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get subscriber(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenewCall__Outputs {
  _call: RenewCall;

  constructor(call: RenewCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get task(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class UnsubscribeCall extends ethereum.Call {
  get inputs(): UnsubscribeCall__Inputs {
    return new UnsubscribeCall__Inputs(this);
  }

  get outputs(): UnsubscribeCall__Outputs {
    return new UnsubscribeCall__Outputs(this);
  }
}

export class UnsubscribeCall__Inputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UnsubscribeCall__Outputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }
}
