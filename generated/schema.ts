// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SRENSSubscription extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SRENSSubscription entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SRENSSubscription must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SRENSSubscription", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SRENSSubscription | null {
    return changetype<SRENSSubscription | null>(
      store.get("SRENSSubscription", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get names(): Array<Bytes> {
    let value = this.get("names");
    return value!.toBytesArray();
  }

  set names(value: Array<Bytes>) {
    this.set("names", Value.fromBytesArray(value));
  }

  get events(): Array<Bytes> {
    let value = this.get("events");
    return value!.toBytesArray();
  }

  set events(value: Array<Bytes>) {
    this.set("events", Value.fromBytesArray(value));
  }
}

export class Name extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Name entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Name must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Name", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Name | null {
    return changetype<Name | null>(store.get("Name", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }

  get subscriptions(): Array<Bytes> {
    let value = this.get("subscriptions");
    return value!.toBytesArray();
  }

  set subscriptions(value: Array<Bytes>) {
    this.set("subscriptions", Value.fromBytesArray(value));
  }
}

export class NameSubscription extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameSubscription entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NameSubscription must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NameSubscription", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NameSubscription | null {
    return changetype<NameSubscription | null>(
      store.get("NameSubscription", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get subscription(): Bytes {
    let value = this.get("subscription");
    return value!.toBytes();
  }

  set subscription(value: Bytes) {
    this.set("subscription", Value.fromBytes(value));
  }

  get name(): Bytes {
    let value = this.get("name");
    return value!.toBytes();
  }

  set name(value: Bytes) {
    this.set("name", Value.fromBytes(value));
  }
}

export class SubscribeEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubscribeEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubscribeEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubscribeEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SubscribeEvent | null {
    return changetype<SubscribeEvent | null>(
      store.get("SubscribeEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get subscriber(): Bytes {
    let value = this.get("subscriber");
    return value!.toBytes();
  }

  set subscriber(value: Bytes) {
    this.set("subscriber", Value.fromBytes(value));
  }

  get indexedName(): Bytes {
    let value = this.get("indexedName");
    return value!.toBytes();
  }

  set indexedName(value: Bytes) {
    this.set("indexedName", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class UnsubscribeEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnsubscribeEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UnsubscribeEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnsubscribeEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UnsubscribeEvent | null {
    return changetype<UnsubscribeEvent | null>(
      store.get("UnsubscribeEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get subscriber(): Bytes {
    let value = this.get("subscriber");
    return value!.toBytes();
  }

  set subscriber(value: Bytes) {
    this.set("subscriber", Value.fromBytes(value));
  }

  get indexedName(): Bytes {
    let value = this.get("indexedName");
    return value!.toBytes();
  }

  set indexedName(value: Bytes) {
    this.set("indexedName", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}
