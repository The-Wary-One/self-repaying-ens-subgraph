schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Name {
  """The keccak256 hash of a name to renew."""
  id: Bytes!
  """The name to renew."""
  text: String!
  """Its subscriptions."""
  subscriptions(skip: Int = 0, first: Int = 100, orderBy: NameSubscription_orderBy, orderDirection: OrderDirection, where: NameSubscription_filter): [NameSubscription!]!
}

"""Intermediate entity to dramatically increase index and query speeds."""
type NameSubscription {
  id: Bytes!
  subscription: SRENSSubscription!
  name: Name!
}

input NameSubscription_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  subscription: String
  subscription_not: String
  subscription_gt: String
  subscription_lt: String
  subscription_gte: String
  subscription_lte: String
  subscription_in: [String!]
  subscription_not_in: [String!]
  subscription_contains: String
  subscription_contains_nocase: String
  subscription_not_contains: String
  subscription_not_contains_nocase: String
  subscription_starts_with: String
  subscription_starts_with_nocase: String
  subscription_not_starts_with: String
  subscription_not_starts_with_nocase: String
  subscription_ends_with: String
  subscription_ends_with_nocase: String
  subscription_not_ends_with: String
  subscription_not_ends_with_nocase: String
  subscription_: SRENSSubscription_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_: Name_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum NameSubscription_orderBy {
  id
  subscription
  name
}

input Name_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  text: String
  text_not: String
  text_gt: String
  text_lt: String
  text_gte: String
  text_lte: String
  text_in: [String!]
  text_not_in: [String!]
  text_contains: String
  text_contains_nocase: String
  text_not_contains: String
  text_not_contains_nocase: String
  text_starts_with: String
  text_starts_with_nocase: String
  text_not_starts_with: String
  text_not_starts_with_nocase: String
  text_ends_with: String
  text_ends_with_nocase: String
  text_not_ends_with: String
  text_not_ends_with_nocase: String
  subscriptions_: NameSubscription_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Name_orderBy {
  id
  text
  subscriptions
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  subscription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SRENSSubscription
  subscriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: SRENSSubscription_orderBy
    orderDirection: OrderDirection
    where: SRENSSubscription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SRENSSubscription!]!
  name(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Name
  names(
    skip: Int = 0
    first: Int = 100
    orderBy: Name_orderBy
    orderDirection: OrderDirection
    where: Name_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Name!]!
  subscribeEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubscribeEvent
  subscribeEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubscribeEvent_orderBy
    orderDirection: OrderDirection
    where: SubscribeEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubscribeEvent!]!
  unsubscribeEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnsubscribeEvent
  unsubscribeEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: UnsubscribeEvent_orderBy
    orderDirection: OrderDirection
    where: UnsubscribeEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnsubscribeEvent!]!
  subscriptionEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubscriptionEvent
  subscriptionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubscriptionEvent_orderBy
    orderDirection: OrderDirection
    where: SubscriptionEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubscriptionEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SRENSSubscription {
  """The `subscriber` address."""
  id: Bytes!
  """The ens names to renew."""
  names(skip: Int = 0, first: Int = 100, orderBy: NameSubscription_orderBy, orderDirection: OrderDirection, where: NameSubscription_filter): [NameSubscription!]!
  """All the events emitted by `subscriber`"""
  events(skip: Int = 0, first: Int = 100, orderBy: SubscriptionEvent_orderBy, orderDirection: OrderDirection, where: SubscriptionEvent_filter): [SubscriptionEvent!]!
}

input SRENSSubscription_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  names_: NameSubscription_filter
  events_: SubscriptionEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SRENSSubscription_orderBy {
  id
  names
  events
}

"""The raw `Subscribe` event."""
type SubscribeEvent implements SubscriptionEvent {
  id: Bytes!
  subscriber: SRENSSubscription!
  indexedName: Bytes!
  name: String!
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

input SubscribeEvent_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  subscriber: String
  subscriber_not: String
  subscriber_gt: String
  subscriber_lt: String
  subscriber_gte: String
  subscriber_lte: String
  subscriber_in: [String!]
  subscriber_not_in: [String!]
  subscriber_contains: String
  subscriber_contains_nocase: String
  subscriber_not_contains: String
  subscriber_not_contains_nocase: String
  subscriber_starts_with: String
  subscriber_starts_with_nocase: String
  subscriber_not_starts_with: String
  subscriber_not_starts_with_nocase: String
  subscriber_ends_with: String
  subscriber_ends_with_nocase: String
  subscriber_not_ends_with: String
  subscriber_not_ends_with_nocase: String
  subscriber_: SRENSSubscription_filter
  indexedName: Bytes
  indexedName_not: Bytes
  indexedName_in: [Bytes!]
  indexedName_not_in: [Bytes!]
  indexedName_contains: Bytes
  indexedName_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SubscribeEvent_orderBy {
  id
  subscriber
  indexedName
  name
  transactionHash
  blockNumber
  blockTimestamp
}

type Subscription {
  srenssubscription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SRENSSubscription
  srenssubscriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: SRENSSubscription_orderBy
    orderDirection: OrderDirection
    where: SRENSSubscription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SRENSSubscription!]!
  name(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Name
  names(
    skip: Int = 0
    first: Int = 100
    orderBy: Name_orderBy
    orderDirection: OrderDirection
    where: Name_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Name!]!
  nameSubscription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NameSubscription
  nameSubscriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: NameSubscription_orderBy
    orderDirection: OrderDirection
    where: NameSubscription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NameSubscription!]!
  subscribeEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubscribeEvent
  subscribeEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubscribeEvent_orderBy
    orderDirection: OrderDirection
    where: SubscribeEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubscribeEvent!]!
  unsubscribeEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnsubscribeEvent
  unsubscribeEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: UnsubscribeEvent_orderBy
    orderDirection: OrderDirection
    where: UnsubscribeEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnsubscribeEvent!]!
  subscriptionEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubscriptionEvent
  subscriptionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubscriptionEvent_orderBy
    orderDirection: OrderDirection
    where: SubscriptionEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubscriptionEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

interface SubscriptionEvent {
  id: Bytes!
  subscriber: SRENSSubscription!
  indexedName: Bytes!
  name: String!
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

input SubscriptionEvent_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  subscriber: String
  subscriber_not: String
  subscriber_gt: String
  subscriber_lt: String
  subscriber_gte: String
  subscriber_lte: String
  subscriber_in: [String!]
  subscriber_not_in: [String!]
  subscriber_contains: String
  subscriber_contains_nocase: String
  subscriber_not_contains: String
  subscriber_not_contains_nocase: String
  subscriber_starts_with: String
  subscriber_starts_with_nocase: String
  subscriber_not_starts_with: String
  subscriber_not_starts_with_nocase: String
  subscriber_ends_with: String
  subscriber_ends_with_nocase: String
  subscriber_not_ends_with: String
  subscriber_not_ends_with_nocase: String
  subscriber_: SRENSSubscription_filter
  indexedName: Bytes
  indexedName_not: Bytes
  indexedName_in: [Bytes!]
  indexedName_not_in: [Bytes!]
  indexedName_contains: Bytes
  indexedName_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SubscriptionEvent_orderBy {
  id
  subscriber
  indexedName
  name
  transactionHash
  blockNumber
  blockTimestamp
}

"""The raw `Unsubscribe` event."""
type UnsubscribeEvent implements SubscriptionEvent {
  id: Bytes!
  subscriber: SRENSSubscription!
  indexedName: Bytes!
  name: String!
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

input UnsubscribeEvent_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  subscriber: String
  subscriber_not: String
  subscriber_gt: String
  subscriber_lt: String
  subscriber_gte: String
  subscriber_lte: String
  subscriber_in: [String!]
  subscriber_not_in: [String!]
  subscriber_contains: String
  subscriber_contains_nocase: String
  subscriber_not_contains: String
  subscriber_not_contains_nocase: String
  subscriber_starts_with: String
  subscriber_starts_with_nocase: String
  subscriber_not_starts_with: String
  subscriber_not_starts_with_nocase: String
  subscriber_ends_with: String
  subscriber_ends_with_nocase: String
  subscriber_not_ends_with: String
  subscriber_not_ends_with_nocase: String
  subscriber_: SRENSSubscription_filter
  indexedName: Bytes
  indexedName_not: Bytes
  indexedName_in: [Bytes!]
  indexedName_not_in: [Bytes!]
  indexedName_contains: Bytes
  indexedName_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum UnsubscribeEvent_orderBy {
  id
  subscriber
  indexedName
  name
  transactionHash
  blockNumber
  blockTimestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}